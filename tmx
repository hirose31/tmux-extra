#!/bin/bash

#
# Tmux launcher
#
# See:
#     http://github.com/brandur/tmux-extra
#
# Modified version of a script orginally found at:
#     http://forums.gentoo.org/viewtopic-t-836006-start-0.html
#

# Works because bash automatically trims by assigning to variables and by 
# passing arguments
trim() { echo $1; }

if [[ -z "$1" ]]; then
    # N of not attched sessions:
    #   0:
    #     N of all sessions:
    #       0: -> exec tmux (create new session)
    #       1: -> share session
    #       other: -> exit (need to specify session name)
    #   1: -> exec tmux attach (firstly attach)
    #   other: -> -> exit (need to specify session name)
    not_attached_session_nb=$(trim $(tmux ls | grep -v 'attached' | wc -l))
    if [[ "$not_attached_session_nb" == "0" ]]; then
        session_nb=$(trim $(tmux ls | wc -l))
        if [[ "$session_nb" == "0" ]]; then
            exec tmux
        elif [[ "$session_nb" == "1" ]]; then
            base_session=$(trim $(tmux ls -F '#{session_name}'))
        else
            echo "Specify session name as the first argument"
            tmux ls
            exit
        fi
    elif [[ "$not_attached_session_nb" == "1" ]]; then
        exec tmux attach
    elif [[ "$not_attached_session_nb" == "2" ]]; then
        # 0: 11 windows (created ...
        # 20141015203559: 11 windows (created ...
        sid=($(tmux ls -F '#{session_name}'))
        if [[ ${sid[0]} == '0' && ${sid[1]} =~ 20[0-9]{12} ]]; then
            tmux kill-session -t "${sid[1]}"
            base_session=${sid[0]}
        else
            echo "Specify session name as the first argument"
            tmux ls
            exit
        fi
    else
        echo "Specify session name as the first argument"
        tmux ls
        exit
    fi
else
    # Only because I often issue `ls` to this script by accident
    if [[ "$1" == "ls" ]]; then
        tmux ls
        exit
    else
        base_session="$1"
    fi
fi

# This actually works without the trim() on all systems except OSX
tmux_nb=$(trim `tmux ls | grep "^$base_session" | wc -l`)
if [[ "$tmux_nb" == "0" ]]; then
    echo "Launching tmux base session $base_session ..."
    tmux new-session -s $base_session
else
    # Make sure we are not already in a tmux session
    if [[ -z "$TMUX" ]]; then
        # Kill defunct sessions first
        old_sessions=$(tmux ls 2>/dev/null | egrep "^[0-9]{14}.*[0-9]+\)$" | cut -f 1 -d:)
        for old_session_id in $old_sessions; do
            tmux kill-session -t $old_session_id
        done

        echo "Launching copy of base session $base_session ..."
        # Session is is date and time to prevent conflict
        session_id=`date +%Y%m%d%H%M%S`
        # Create a new session (without attaching it) and link to base session 
        # to share windows
        tmux new-session -d -t $base_session -s $session_id
        # Attach to the new session
        tmux attach-session -t $session_id
        # When we detach from it, kill the session
        tmux kill-session -t $session_id
    fi
fi 

# Local Variables:
# mode: sh
# sh-basic-offset: 4
# sh-indentation: 4
# tab-width: 4
# indent-tabs-mode: nil
# coding: utf-8
# End:
